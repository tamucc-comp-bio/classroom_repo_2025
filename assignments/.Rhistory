date = ymd(labdate)) %>%
select(-labdate) %>%
group_by(date, zip) %>%
summarise(new_cases = n())
# check data format again
view(covid_cases_zip)
# check data format again
view(covid_cases_zip)
# tibble before mutate
read_excel(data_zip_count_file_path) %>%
clean_names()
# HEATMAP: new cases per day by zip code
covid_cases_zip %>%
ggplot() +
aes(x = date, y = zip, fill = new_cases) +
geom_tile() +
geom_smooth(se = FALSE)
# SCATTERPLOT: new cases per day
covid_cases_zip %>%
summarize(new_cases = sum(new_cases))
covid_cases_zip %>%
summarize(new_cases = sum(new_cases)) %>%
ggplot() +
aes(x = date, y = new_cases) +
geom_point() +
geom_smooth() +
theme_classic()
covid_cases_zip %>%
summarize(new_cases = sum(new_cases)) %>%
ggplot() +
aes(x = date,
y = new_cases) +
geom_point() +
geom_smooth() +
theme_classic()
#### Use `filter` To Remove Rows then Create Scatterplot ####
# SCATTERPLOT: new cases per day by zip code
# here we remove the zip codes with too little data to make this figure
covid_cases_zip %>%
filter(!zip %in% c("78469",
"78402")) %>%   # note, we would want to add this to the USER DEFINED VARIABLES rather than hardcoding it like this
ggplot() +
aes(x = date,
y = new_cases,
color = zip)
#### Use `filter` To Remove Rows then Create Scatterplot ####
# SCATTERPLOT: new cases per day by zip code
# here we remove the zip codes with too little data to make this figure
covid_cases_zip %>%
filter(!zip %in% c("78469",
"78402")) %>%   # note, we would want to add this to the USER DEFINED VARIABLES rather than hardcoding it like this
ggplot() +
aes(x = date,
y = new_cases,
color = zip) +
geom_point() +
geom_smooth(se = FALSE)  +
theme_classic()
#### Plot Two Different Tibbles in 1 Scatterplot ####
# SCATTERPLOT: new cases per day by zip code, compare to mean
covid_cases_zip %>%
filter(zip == "78412") %>%
ggplot() +
aes(x = date,
y = new_cases) +
geom_point(color="red4") +
geom_smooth(se = FALSE,
color="red4") +
geom_point(data = covid_cases_zip %>%
summarize(mean_new_cases = mean(new_cases)),
aes(x = date,
y = mean_new_cases),
color="black") +
geom_smooth(data = covid_cases_zip %>%
summarize(mean_new_cases = mean(new_cases)),
aes(x = date,
y = mean_new_cases),
color="black") +
theme_classic()
# add columns for the day of the week and month, then
# change unit of observation (rows) to the number of covid cases by day of week and month
covid_cases_zip %>%
mutate(day = wday(date,
label=TRUE,
abbr=TRUE),
month = month(date,
label=TRUE,
abbr=TRUE)) %>%
group_by(day,
month) %>%
summarize(new_cases = sum(new_cases))
# COLUMNPLOT: total new cases per day of week for each month
covid_cases_zip %>%
mutate(day = wday(date,
label=TRUE,
abbr=TRUE),
month = month(date,
label=TRUE,
abbr=TRUE)) %>%
group_by(day,
month) %>%
summarize(new_cases = sum(new_cases)) %>%
ggplot(aes(x = day,
y = new_cases)) +
geom_col() +
geom_smooth() +
theme_classic() +
facet_grid(month ~ .)
covid_cases_zip %>%
mutate(day = wday(date,
label=TRUE,
abbr=TRUE),
month = month(date,
label=TRUE,
abbr=TRUE)) %>%
group_by(day,
month) %>%
summarize(new_cases = sum(new_cases)) %>%
ggplot() +
aes(x = day,
y = new_cases) +
geom_col() +
geom_smooth() +
theme_classic() +
facet_grid(. ~ month)
#### read in census data by zip code####
pop_zip <- read_excel(data_zip_census_file_path)
str(pop_zip)
# isolate numeric zip code
read_excel(data_zip_census_file_path) %>%
clean_names() %>%
separate(col=zip_code,
into=c('x1',
'x2',
'zip'))
# isolate numeric zip code & polish tibble
pop_zip <-
read_excel(data_zip_census_file_path) %>%
clean_names() %>%
separate(col=zip_code,
into=c('x1',
'x2',
'zip')) %>%
select(zip,
city,
population)
# left join covid_cases_zip and pop_zip, creating new tibble
covid_cases_zip_pop <-
covid_cases_zip %>%
left_join(pop_zip,
by = "zip")
covid_cases_zip_pop
# COLUMNPLOT: Total Cases Per Capita by Zip Code
covid_cases_zip_pop %>%
filter(!zip %in% c("78469",
"78402"),
population > 0) %>%
group_by(zip, population) %>%
summarize(total_cases = sum(new_cases)) %>%
mutate(cases_per100 = 100 * total_cases / population) %>%
ggplot(aes(x=zip, y=cases_per100)) +
geom_col() +
theme_classic()
#### How Much Variation is There in Cases by Zipcode? ####
covid_cases_zip_pop %>%
filter(!zip %in% c("78469",
"78402"),
population > 0) %>%
group_by(zip,
population) %>%
summarize(total_cases = sum(new_cases)) %>%
mutate(cases_per100 = 100 * total_cases / population) %>%
ggplot() +
aes(x=zip,
y=cases_per100) +
geom_col() +
theme_classic()
# COLUMNPLOT: Total Cases Per Capita by Zip Code
covid_cases_zip_pop %>%
filter(!zip %in% c("78469",
"78402"),
population > 0) %>%
group_by(zip,
population) %>%
summarize(total_cases = sum(new_cases)) %>%
mutate(cases_per100 = 100 * total_cases / population) %>%
ggplot() +
aes(x=population,
y=cases_per100)
# COLUMNPLOT: Total Cases Per Capita by Zip Code
covid_cases_zip_pop %>%
filter(!zip %in% c("78469",
"78402"),
population > 0) %>%
group_by(zip,
population) %>%
summarize(total_cases = sum(new_cases)) %>%
mutate(cases_per100 = 100 * total_cases / population) %>%
ggplot() +
aes(x=population,
y=cases_per100) +
geom_point() +
geom_smooth() +
theme_classic()
#### Read In Zip Data ####
covid_cases_zip_pop <-
read_excel(data_zip_count_file_path) %>%
clean_names() %>%
mutate(zip = as_factor(zip),
date = ymd(labdate)) %>%
select(-labdate) %>%
group_by(date,
zip) %>%
summarize(new_cases = n()) %>%
left_join(read_excel(data_zip_census_file_path) %>%
clean_names() %>%
separate(col=zip_code,
into=c('x1',
'x2',
'zip')) %>%
select(zip,
city,
population),
by = "zip")
#### Read In Demographic Data ####
bind_rows(read_excel(data_age_count_file_path,
sheet = "Jul"),
read_excel(data_age_count_file_path,
sheet = "Aug"),
read_excel(data_age_count_file_path,
sheet = "Sep"),
read_excel(data_age_count_file_path,
sheet = "Oct"))
View(covid_cases_zip_pop)
#### Recode Ages into Age Classes using `mutate()` and `case_when()` ####
covid_cases_age <-
bind_rows(read_excel(data_age_count_file_path,
sheet = "Jul"),
read_excel(data_age_count_file_path,
sheet = "Aug"),
read_excel(data_age_count_file_path,
sheet = "Sep"),
read_excel(data_age_count_file_path,
sheet = "Oct")) %>%
clean_names() %>%
mutate(date = ymd(labdate)) %>%
select(-labdate) %>%
mutate(age_class = case_when(
age_years < 20 ~ "0-19",
age_years >= 20 & age_years < 40 ~ "20-39",
age_years >= 40 & age_years < 60 ~ "40-59",
age_years >= 60 & age_years < 80 ~ "60-79",
age_years >= 80 ~ "80+")) %>%
group_by(date,
age_class) %>%
summarize(new_cases = n())
View(covid_cases_age)
#### unstack data by age class using pivot_wider####
covid_cases_age %>%
pivot_wider(names_from = "age_class",
values_from = "new_cases")
covid_cases_age
covid_cases_age %>%
pivot_wider(names_from = "age_class",
values_from = "new_cases")
mtcars
nrow(mtcars)
mtcars <- mtcars
diamonds < diamonds
diamonds <- diamonds
#### Plot Two Different Tibbles in 1 Scatterplot ####
# SCATTERPLOT: new cases per day by zip code, compare to mean
covid_cases_zip %>%
filter(zip == "78412") %>%
ggplot() +
aes(x = date,
y = new_cases) +
geom_point(color="red4") +
geom_smooth(se = FALSE,
color="red4") +
geom_point(data = covid_cases_zip %>%
summarize(mean_new_cases = mean(new_cases)),
aes(x = date,
y = mean_new_cases),
color="black") +
geom_smooth(data = covid_cases_zip %>%
summarize(mean_new_cases = mean(new_cases)),
aes(x = date,
y = mean_new_cases),
color="black") +
theme_classic()
#### INITIALIZE ####
# 1. Set your working directory to be your homework repo, i.e. the dir that contains this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 2. Load tidyverse
library(tidyverse)
#### Read In Data ####
# 3. We will use the built-in data sets `mpg` and `diamonds`
#See sections 3.2.1 and 3.7 of R for Dat Sci https://r4ds.had.co.nz/data-visualisation.html
#Save mpg into a variable called mpg
#Save diamonds into a variable called diamonds
#If completed successfully, your environment should look like assignment_7_3.png
mpg <- mpg
mpg
#### Read In Data ####
# 3. We will use the built-in data sets `mpg` and `diamonds`
#See sections 3.2.1 and 3.7 of R for Dat Sci https://r4ds.had.co.nz/data-visualisation.html
#Save mpg into a variable called mpg
#Save diamonds into a variable called diamonds
#If completed successfully, your environment should look like assignment_7_3.png
mpg <- mpg
diamonds <- diamonds
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
mpg %>%
ggplot() +
aes(x = displ,
y = hwy) +
geom_point(color = "blue")
# 5. Update the plot from number 4 to color the points by `year`,
# set the size by `cyl` and the shape by `drv`
# continue to use the unrolled code formatting I've emphasized in lecture
# see assignment_7_5.png to check your plot
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point()
# 6. Update the plot from number 5 to be faceted by `trans` and
# set the number of facet rows be 2
# continue to use the unrolled code formatting I've emphasized in lecture
# see assignment_7_6.png to check your plot
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = year,
size = cyl,
shape = drv) +
geom_point() +
facet_wrap(trans ~ .,
nrow = 2)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = FALSE)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point(legend=FALSE) +
geom_smooth(se = FALSE)
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv) +
geom_point() +
geom_smooth(se = TRUE) +
theme(legend.position="none")
# 8. Write the code to recreate the plot in `assignment_7_8.PNG`
# continue to use the unrolled code formatting I've emphasized in lecture
mpg %>%
ggplot() +
aes(x = displ,
y = hwy,
color = drv,
linetype = drv) +
geom_point() +
geom_smooth(se = FALSE,
color = "blue")
diamonds %>%
ggplot() +
aes(x=cut,
y=depth) +
geom_pointrange(stat = "summary",
fun = median,
fun.min = min,
fun.max = max)
diamonds
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_point(position = "jitter")
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_point()
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_point(position = "jitter")
# 12.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), plot a map of Texas with the aspect ratio correctly set,
# and the fill set to county. Hide the figure legend (just like in Q7).
# continue to use the unrolled code formatting I've emphasized in lecture
# you will want to experiment with map_data to create a tibble before plotting
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(color = "black") +
coord_quickmap() +
theme(legend.position = "none")
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_jitter()
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_count()
mpg %>%
ggplot() +
aes(x=cty,
y=hwy) +
geom_count(position = "jitter")
# 12.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), plot a map of Texas with the aspect ratio correctly set,
# and the fill set to county. Hide the figure legend (just like in Q7).
# continue to use the unrolled code formatting I've emphasized in lecture
# you will want to experiment with map_data to create a tibble before plotting
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(color = "black") +
coord_quickmap() +
theme(legend.position = "none")
map_data(map="county",
region="texas")
# 12.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), plot a map of Texas with the aspect ratio correctly set,
# and the fill set to county. Hide the figure legend (just like in Q7).
# continue to use the unrolled code formatting I've emphasized in lecture
# you will want to experiment with map_data to create a tibble before plotting
map_data(map="county",
region="texas",
subregion="nueces") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(color = "black") +
coord_quickmap() +
theme(legend.position = "none")
map_data(map="county",
region="texas")
# 12.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), plot a map of Texas with the aspect ratio correctly set,
# and the fill set to county. Hide the figure legend (just like in Q7).
# continue to use the unrolled code formatting I've emphasized in lecture
# you will want to experiment with map_data to create a tibble before plotting
map_data(map="county",
region="texas") %>% filter(subregion == "anderson")
# 12.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), plot a map of Texas with the aspect ratio correctly set,
# and the fill set to county. Hide the figure legend (just like in Q7).
# continue to use the unrolled code formatting I've emphasized in lecture
# you will want to experiment with map_data to create a tibble before plotting
map_data(map="county",
region="texas") %>% filter(subregion == "nueces")
# 12.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), plot a map of Texas with the aspect ratio correctly set,
# and the fill set to county. Hide the figure legend (just like in Q7).
# continue to use the unrolled code formatting I've emphasized in lecture
# you will want to experiment with map_data to create a tibble before plotting
map_data(map="county",
region="texas") %>%
filter(subregion == "nueces") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(color = "black") +
coord_quickmap() +
theme(legend.position = "none")
# 12.  Referring to section 3.9 of R for Data Science and the help page
# for map_data(), plot a map of Texas with the aspect ratio correctly set,
# and the fill set to county. Hide the figure legend (just like in Q7).
# continue to use the unrolled code formatting I've emphasized in lecture
# you will want to experiment with map_data to create a tibble before plotting
map_data(map="county",
region="texas") %>%
ggplot() +
aes(x=long,
y=lat,
group=group,
fill = subregion) +
geom_polygon(color = "black") +
coord_quickmap() +
theme(legend.position = "none")
