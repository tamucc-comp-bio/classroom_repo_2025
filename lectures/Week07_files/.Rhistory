tbld %>% filter(date > ymd("2020-09-21"),
day_cumul == "daily",
scenario == "tsaU_scenario2")
tbld %>% filter(date > today(),
day_cumul == "daily",
scenario == "tsaU_scenario2")
tbld %>% filter(date > today(),
day_cumul == "daily",
scenario == "tsaU_scenario2") %>%
summarise(fatalities = sum(estimate))
tbld %>% filter(date > today(),
day_cumul == "daily",
scenario == "tsaU_scenario1") %>%
summarise(fatalities = sum(estimate))
unique(tblh$day_cumul)
tblh %>% filter(date > today(),
day_cumul == "census",
scenario == "tsaU_scenario2") %>%
summarise(fatalities = max(estimate))
tblh %>% filter(date > today(),
day_cumul == "census",
scenario == "tsaU_scenario2")
tblh %>% filter(date > today(),
day_cumul == "census",
scenario == "tsaU_scenario2") %>%
summarise(hospitalizations = max(estimate))
tblh %>% filter(date > today(),
day_cumul == "census",
scenario == "tsaU_scenario1") %>%
summarise(hospitalizations = max(estimate))
unique(tbl$day_cumul)
unique(tbl$measure)
View(model_output)
unique(model_output$measure)
model_output %>%
filter(measure == 'new_infected' ,
model == 'C19S',
day_cumul == 'census')
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily')
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily',
date > today(),
scenario == "tsaU_scenario1")
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily',
date > today(),
scenario == "tsaU_scenario1") %>%
mutate(cases = newinfected/5.6)
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily',
date > today(),
scenario == "tsaU_scenario1")
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily',
date > today(),
scenario == "tsaU_scenario1") %>%
mutate(cases = measure/5.6)
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily',
date > today(),
scenario == "tsaU_scenario1") %>%
mutate(cases = estimate/5.6)
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily',
date > today(),
scenario == "tsaU_scenario1") %>%
mutate(cases = round(estimate/5.6,0))
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily',
date > today(),
scenario == "tsaU_scenario1") %>%
mutate(cases = round(estimate/5.6,0)) %>%
summarise(subtotal_cases = sum(cases))
model_output %>%
filter(measure == 'newinfected' ,
model == 'C19S',
day_cumul == 'daily',
date > today(),
scenario == "tsaU_scenario2") %>%
mutate(cases = round(estimate/5.6,0)) %>%
summarise(subtotal_cases = sum(cases))
22000 * 5.6
=598000/123200
598000/123200
123200/598000
70/20
600*3.5
639*3.5
10*639
2237-639
6390-639
rm(list=ls())
setwd("./")
AlbInFile <- "./AlbatrossBarcodes.csv"
ContInFile <- "./ContempBarcodes.csv"
Species <- "Sspi"
sink(sprintf('./%s_ErrorCalc_Analysis_Output.txt',Species))
writeLines(c(sprintf("> Species=%s",Species)))
writeLines(c("\n","####################################","\n"))
sink()
library(tidyverse)
library(magrittr)
library(splines)
library(lme4)
library(afex)
install.packages("afex")
library(afex)
library(emmeans)
library(expss)
install.packages("expss")
library(expss)
library(car)
library(emmeans)
library(expss)
library(car)
Albatross <- read_csv(AlbInFile, col_types = str_c(rep('c', 20), collapse = ''))
1/402
1/200
1/300
getwd()
setwd("~")
getwd()
list.dirs()
help(normalize)
12/86
123/1488
123/1627
123/924
install.packages("broom")
install.packages("dbplyr")
install.packages("emmeans")
install.packages("furrr")
install.packages(c("lubridate", "magrittr", "readr", "stringi", "tidybayes", "tidymodels", "tidypredict", "tidyquant"))
library(installr)
install.packages("installr")
library(installr)
version
updateR()
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residuals
citation()
2380/2763
2380/3800
devtools::install_github("ngthomas/microhaplot", build_vignettes = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
2381/3800
8525/15000
44100/88000
library(waffle)
library(extrafont)
library(showtext)
library(hrbrthemes)
library(echarts4r)
library(remotes)
library(emojifont)
#### waffle plot ####
waffle(
c('Yes=70%' = 70,
'No=30%' = 30),
rows = 10,
colors = c("#FD6F6F",
"#93FB98"),
title = 'Responses',
legend_pos="top"
)
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "smile",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
waffle()
font_add(family = "FontAwesome",
regular = "fontawesome-webfont.ttf")
font_add(family = "FontAwesome",
regular = "C:/Users/cbird/Documents/R/win-library/4.1/waffle/fontsfontawesome-webfont.ttf")
font_add(family = "FontAwesome",
regular = "C:/Users/cbird/Documents/R/win-library/4.1/waffle/fonts/fontawesome-webfont.ttf")
showtext_auto()
fonts()[grep("Awesome", fonts())]
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "smile",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
# Download and install fontawesome fonts from this URL https://github.com/FortAwesome/Font-Awesome/tree/master/webfonts. You need to download these 3 files - fa-solid-900.ttf, fa-regular-400.ttf and fa-brands-400.ttf
extrafont::font_import (path="C:\\Users\\cbird\\Downloads",
pattern = "fa-",
prompt =  FALSE)
loadfonts(device = "win")
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "smile",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
font_add(family = "FontAwesome",
regular = "C:\\Users\\cbird\\Downloads\\fa-solid-900.ttf")
font_add(family = "FontAwesome",
regular = "C:\\Users\\cbird\\Downloads\\fa-regular-400.ttf")
font_add(family = "FontAwesome",
regular = "C:\\Users\\cbird\\Downloads\\fa-brands-400.ttf")
font_add(family = "FontAwesome",
regular = "C:/Users/cbird/Documents/R/win-library/4.1/waffle/fonts/fontawesome-webfont.ttf")
showtext_auto()
fonts()[grep("Awesome", fonts())]
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "smile",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
extrafont::font_import (path="C:/Users/cbird/Documents/R/win-library/4.1/waffle/fonts/",
pattern = "fontawesome-webfont.ttf",
prompt =  FALSE)
loadfonts(device = "win")
extrafont::fonttable() %>%
dplyr::as_tibble() %>%
dplyr::filter(grepl("Awesom", FamilyName)) %>%
select(FamilyName, FontName, fontfile)
library(tidyverse)
extrafont::fonttable() %>%
dplyr::as_tibble() %>%
dplyr::filter(grepl("Awesom", FamilyName)) %>%
dplyr::select(FamilyName, FontName, fontfile)
font_add(family = "FontAwesome5Free-Solid",
regular = "C:\\Users\\cbird\\Downloads\\fa-solid-900.ttf")
font_add(family = "FontAwesome5Free-Regular",
regular = "C:\\Users\\cbird\\Downloads\\fa-regular-400.ttf")
font_add(family = "FontAwesome5Brands-Regular",
regular = "C:\\Users\\cbird\\Downloads\\fa-brands-400.ttf")
font_add(family = "FontAwesome",
regular = "C:/Users/cbird/Documents/R/win-library/4.1/waffle/fonts/fontawesome-webfont.ttf")
showtext_auto()
fonts()[grep("Awesome", fonts())]
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "smile",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "music",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "female",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "male",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
waffle::fa_grep(".*")
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "at",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
waffle::fa_grep("bed")
waffle(
c(`Poor=10` =10,
`Average=18` = 18,
`Excellent=7` =7),
rows = 5,
colors = c("#FD6F6F",
"#93FB98",
"#D5D9DD"),
use_glyph = "bed",
glyph_size = 12 ,
title = 'Girls Performance',
legend_pos="bottom"
)
iron(
waffle(
c('TRUE' = 7, 'FALSE' = 3),
colors = c("pink", "grey70"),
use_glyph = "female",
glyph_size = 12,
title = "Female vs Male",
rows = 1,
legend_pos = "none"
) + theme(plot.title = element_text(hjust = 0.5))
,
waffle(
c('TRUE' = 8, 'FALSE' = 2),
colors = c("skyblue", "grey70"),
use_glyph = "male",
glyph_size = 12,
rows = 1,
legend_pos = "none"
)
)
mydf <- data.frame(food_group = factor(c("Ice Cream", "Pizza", "Cake"),
levels=c("Ice Cream", "Pizza", "Cake")), consumption = c(10, 20, 10))
# Scales and preparing for labels
scalevalues <- sprintf("%.0f%%",round(prop.table(mydf$consumption)*100, 3))
customtext <- c(
paste("Ice cream", '=', scalevalues[1]),
paste("Pizza", '=', scalevalues[2]),
paste("Cake", '=', scalevalues[3])
)
mydf %>%
ggplot(aes(label = food_group,
values = consumption,
color = food_group)) +
geom_pictogram(n_rows = 10, make_proportional = TRUE) +
scale_color_manual(
name = NULL,
values = c(
`Ice Cream` = "#c68958",
Pizza = "#ae6056",
Cake = "#a40000"
),
labels = customtext
) +
scale_label_pictogram(
name = NULL,
values = c(
`Ice Cream` = "ice-cream",
Pizza = "pizza-slice",
Cake = "birthday-cake"
),
labels = customtext) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle() +
theme(legend.key.height = unit(2.25, "line")) +
theme(legend.text = element_text(size = 10, hjust = 0, vjust = 0.75))
library(hrbrthemes)
mydf %>%
ggplot(aes(label = food_group,
values = consumption,
color = food_group)) +
geom_pictogram(n_rows = 10, make_proportional = TRUE) +
scale_color_manual(
name = NULL,
values = c(
`Ice Cream` = "#c68958",
Pizza = "#ae6056",
Cake = "#a40000"
),
labels = customtext
) +
scale_label_pictogram(
name = NULL,
values = c(
`Ice Cream` = "ice-cream",
Pizza = "pizza-slice",
Cake = "birthday-cake"
),
labels = customtext) +
coord_equal() +
theme_ipsum_rc(grid="") +
theme_enhance_waffle() +
theme(legend.key.height = unit(2.25, "line")) +
theme(legend.text = element_text(size = 10, hjust = 0, vjust = 0.75))
devtools::install_github("GuangchuangYu/emojifont")
devtools::install_github("GuangchuangYu/emojifont", force = TRUE)
library(emojifont)
library(emojifont)
search_emoji(".")
search_emoji(".") %>% view
search_emoji(".") %>% view()
search_emoji("bed")
emoji("bed")
emoji("sleeping_bed")
fa <- fontawesome(c('fa-github', 'fa-weibo', 'fa-twitter', 'fa-android', 'fa-coffee'))
fa
devtools::install_github("rstudio/fontawesome")
#### get icons installed and available ####
# Download and install fontawesome fonts from this URL https://github.com/FortAwesome/Font-Awesome/tree/master/webfonts. You need to download these 3 files - fa-solid-900.ttf, fa-regular-400.ttf and fa-brands-400.ttf
extrafont::font_import (path="C:/Users/cbird/Documents/R/win-library/4.1/fontawesome/fontawesome/webfonts/",
pattern = "fa-",
prompt =  FALSE)
fonts()
library(extrafont)
fonts()
#### get icons installed and available ####
# Download and install fontawesome fonts from this URL https://github.com/FortAwesome/Font-Awesome/tree/master/webfonts. You need to download these 3 files - fa-solid-900.ttf, fa-regular-400.ttf and fa-brands-400.ttf
extrafont::font_import (path="C:/Users/cbird/Documents/R/win-library/4.1/fontawesome/fontawesome/webfonts/",
pattern = "fa-",
prompt =  FALSE)
fonttable()
fonttable() -> x
install.packages("extrafontdb")
install.packages("extrafontdb")
install.packages(c("adegenet", "blob", "broom", "cli", "colorspace", "credentials", "curl", "dplyr", "e1071", "emojifont", "gert", "ggdist", "googlesheets4", "gtools", "haven", "jpeg", "lme4", "matrixStats", "mime", "mvtnorm", "parallelly", "Quandl", "RcppArmadillo", "readr", "reprex", "rmarkdown", "rsconnect", "Rttf2pt1", "rvest", "stringi", "tibble", "tidybayes", "tidytable", "tinytex", "utf8", "wk", "xfun"))
install.packages(c("adegenet", "blob", "broom", "cli", "colorspace", "credentials", "curl", "dplyr", "e1071", "emojifont", "gert", "ggdist", "googlesheets4", "gtools", "haven", "jpeg", "lme4", "matrixStats", "mime", "mvtnorm", "parallelly", "Quandl", "RcppArmadillo", "readr", "reprex", "rmarkdown", "rsconnect", "Rttf2pt1", "rvest", "stringi", "tibble", "tidybayes", "tidytable", "tinytex", "utf8", "wk", "xfun"))
install.packages(c("adegenet", "blob", "broom", "cli", "colorspace", "credentials", "curl", "dplyr", "e1071", "emojifont", "gert", "ggdist", "googlesheets4", "gtools", "haven", "jpeg", "lme4", "matrixStats", "mime", "mvtnorm", "parallelly", "Quandl", "RcppArmadillo", "readr", "reprex", "rmarkdown", "rsconnect", "Rttf2pt1", "rvest", "stringi", "tibble", "tidybayes", "tidytable", "tinytex", "utf8", "wk", "xfun"))
install.packages(c("adegenet", "blob", "broom", "cli", "colorspace", "credentials", "curl", "dplyr", "e1071", "emojifont", "gert", "ggdist", "googlesheets4", "gtools", "haven", "jpeg", "lme4", "matrixStats", "mime", "mvtnorm", "parallelly", "Quandl", "RcppArmadillo", "readr", "reprex", "rmarkdown", "rsconnect", "Rttf2pt1", "rvest", "stringi", "tibble", "tidybayes", "tidytable", "tinytex", "utf8", "wk", "xfun"))
install.packages(c("adegenet", "blob", "broom", "cli", "colorspace", "credentials", "curl", "dplyr", "e1071", "emojifont", "gert", "ggdist", "googlesheets4", "gtools", "haven", "jpeg", "lme4", "matrixStats", "mime", "mvtnorm", "parallelly", "Quandl", "RcppArmadillo", "readr", "reprex", "rmarkdown", "rsconnect", "Rttf2pt1", "rvest", "stringi", "tibble", "tidybayes", "tidytable", "tinytex", "utf8", "wk", "xfun"))
10000 * 0.01
install.packages(c("ade4", "akima", "brms", "bslib", "cachem", "cli", "DescTools", "DT", "e1071", "emmeans", "Exact", "future", "gert", "htmltools", "htmlwidgets", "httpuv", "ipred", "knitr", "later", "lava", "magick", "maptools", "matrixStats", "openssl", "packrat", "parallelly", "pkgload", "poppr", "posterior", "R6", "RCurl", "rgdal", "rgeos", "rmarkdown", "roxygen2", "Rttf2pt1", "shinyWidgets", "spdep", "stringi", "tibble", "tidybayes", "tidytable", "vroom", "waldo", "xfun"))
install.packages(c("e1071", "magick", "maptools", "matrixStats", "openssl", "packrat", "parallelly", "pkgload", "poppr", "posterior", "R6", "RCurl", "rgdal", "rgeos", "rmarkdown", "roxygen2", "Rttf2pt1", "shinyWidgets", "spdep", "stringi", "tibble", "tidybayes", "tidytable", "vroom", "waldo", "xfun"))
install.packages(c("e1071", "magick", "maptools", "matrixStats", "openssl", "packrat", "parallelly", "pkgload", "poppr", "posterior", "R6", "RCurl", "rgdal", "rgeos", "rmarkdown", "roxygen2", "Rttf2pt1", "shinyWidgets", "spdep", "stringi", "tibble", "tidybayes", "tidytable", "vroom", "waldo", "xfun"))
install.packages(c("e1071", "magick", "maptools", "matrixStats", "openssl", "packrat", "parallelly", "pkgload", "poppr", "posterior", "R6", "RCurl", "rgdal", "rgeos", "rmarkdown", "roxygen2", "Rttf2pt1", "shinyWidgets", "spdep", "stringi", "tibble", "tidybayes", "tidytable", "vroom", "waldo", "xfun"))
install.packages(c("e1071", "magick", "maptools", "matrixStats", "openssl", "packrat", "parallelly", "pkgload", "poppr", "posterior", "R6", "RCurl", "rgdal", "rgeos", "rmarkdown", "roxygen2", "Rttf2pt1", "shinyWidgets", "spdep", "stringi", "tibble", "tidybayes", "tidytable", "vroom", "waldo", "xfun"))
install.packages(c("e1071", "magick", "maptools", "matrixStats", "openssl", "packrat", "parallelly", "pkgload", "poppr", "posterior", "R6", "RCurl", "rgdal", "rgeos", "rmarkdown", "roxygen2", "Rttf2pt1", "shinyWidgets", "spdep", "stringi", "tibble", "tidybayes", "tidytable", "vroom", "waldo", "xfun"))
install.packages(c("stringi", "tibble"))
install.packages(c("stringi", "tibble"))
install.packages(c("stringi", "tibble"))
install.packages(c("stringi", "tibble"))
install.packages("swirl")
library("swirl")
swirl()
swirl()
# Intro to ggplot2
# Computing Skills for Biologists Ch 9.6 - end
# It is assumed that this script has been saved to `CSB/data_wrangling/sandbox`
# You can collapse the code sections with alt-o
# You can expand the sections by clicking on triangles next to section headings
#### INITIALIZE ####
rm(list=ls())
getwd()
#set working directory to location of this script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# if this does not return a dir that ends with `CSB/data_wrangling/sandbox` then save this script to your data_wrangling text box and re run the previous lines of code
getwd()
